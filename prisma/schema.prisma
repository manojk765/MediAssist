// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  age           Int?
  gender        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  symptomEntries   SymptomEntry[]
  userPreferences  UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  reminderNotifications Boolean @default(true)
  theme                 String  @default("system")
  language              String  @default("en") // Language code
  fontSize              String  @default("medium")
  shareData             Boolean @default(false)
  anonymousAnalytics    Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SymptomEntry {
  id             String   @id @default(cuid())
  userId         String
  symptoms       String[] // Array of symptom names

  disease        String   // Predicted disease
  description    String   // Disease description
  precautions    String[] // Array of precautions
  medications    String[] // Array of medications
  workouts       String[] // Array of workout recommendations
  diets          String[] // Array of diet recommendations
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
